const projectData = [
  {title: "Virtual Relay", photo: "url/permanatelocation", link: "deployedurl", description: "App used for a Virtual Relay", details: "\tThis app was built for the second virtual relay I organized. Since I developed my full stack skills between relays, I wanted to give my runners a better experience this time. A relational database, like the PostgreSQL one I used, functions similarly to Google Sheets, so I was able to translate most of the work from last time into this app.\n\n \tI knew from the first relay I would need a convenient way to update and adjust the start times and leg information. I built a promise chain to update the leg estimates whenever the start time was adjusted. This promise chain maps through the legs takes the estimated start time, pace, and distance, passes the estimated end time to the next leg for its calculation, and posts the results to the database. I also had the leg information saved in a seed file to quickly update relay information changes and serve as a backup if needed.\n\n \tOnce the functionality was done I was able to add a bit of flare. I had a GIF of a running stick figure following the progress bar throughout the relay. Once the first leg was complete, and every 25% thereafter, an array of team shirts from our in-person relays would display a different shirt depending on how much of the relay was complete. My runners could also now safely mark their legs complete without edit access to potentially mess up the Google Sheet. After some user testing, to improve their experience, I added refreshes after certain events so that users would know a change happened. ", type: "solo"},
  {title: "Ecommerce Front and Back End Updates", photo: "url/permanatelocation", link: "deployedurl", description: "Simulated updates to an Ecommerce sites front end and the back end/API", details: "\tThe first project for this ecommerce site was a front end update. We were given an existing API to connect our front end to, and a a document detailing the required functionality and containing a design template.  I was responsible for the questions and answers section of the page. The first task was to sort the questions into those that had been answered, as those should be more helpful to customers. A search function to help narrow questions and answers was also asked to be added to the site. A late request to add click trackers to the site became my final major addition to the project. I created a function that could be used by my teammates as well for all the click interactions we had built for the project.\n\n \tNow that the front end was generating more traffic, we were tasked with redesigning the API to handle it. The end goal was to handle peak traffic of around 2000 requests per second with less than 40 milliseconds of latency. To start I needed to perform an ETL of the millions of questions answers and photo urls for the Q&A API. With the data in hand, it was time to design the queries to match the output of the current API so that the new one would work with the front end. I then began refactoring the Queries to reduce latency on my local machine to 40m/s.\n\n \tAfter local optimization reached its limits it was time to deploy the Q&A API. I used an AWS EC2 instance to deploy, and after initial testing, I could only handle around 1000 requests per second before encountering latency issues. I deployed several duplicate instances of the API and used a load balancer to route traffic. With the addition of a cache to the load balancer, the API could handle 2000 requests per second with less than 5 milliseconds of latency.  ", type: "team"},
  {title: "Generic Job Board", photo: "url/permanatelocation", link: "deployedurl", description: "Built a Job Board that had features missing from the ones I have been using while applying", details: "longer description for accordian", type: "solo"},
  {title: "Birder Connect", photo: "url/permanatelocation", link: "deployedurl", description: "Simulate a small team build for a client", details: "longer description for accordian", type: "team"},
  {title: "Modals and Accordians", photo: "url/permanatelocation", link: "deployedurl", description: "Provide a plug and play resource that explains what modals and accordians are", details: "\tBuilt for a 5-minute presentation to share technical information with our juniors. The repository for this was designed so that they could fork it and then learn from the pre-built components how they work.\n\n \tThe presentation used modals and accordions to display the information about each. The first modal that opens explains the difference between a modal and a pop-up. We then flow into an accordion example with a ??? accordion and button inside. This launches the presentation within the presentation, laughter, and its benefits on mental health. The Junior phase of Hack Reactor is one of the most intense learning experiences I have been through, so I wanted to help out the next class in any way I could. ", type: "edu"},
]

export default projectData;

